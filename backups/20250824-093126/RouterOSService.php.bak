<?php
namespace App\Services;

use App\Models\Mikrotik;
use RouterOS\Client;
use RouterOS\Query;

class RouterOSService
{
    protected $client;
    protected $m;

    public function __construct(Mikrotik $m)
    {
        $this->m = $m;
        $this->client = new Client([
            'host'     => $m->host,
            'user'     => $m->username,
            'pass'     => $m->password,
            'port'     => $m->port ?: 8728,
            'timeout'  => 8,
            'attempts' => 1,
        ]);
        \Log::info('[ROS] connected', ['host'=>$m->host,'port'=>$m->port,'user'=>$m->username]);
    }

    /** Jalankan query aman, return [] kalau error dan log detail */
    protected function safeQuery(Query $q): array
    {
        try {
            return $this->client->query($q)->read();
        } catch (\Throwable $e) {
            \Log::error('[ROS_ERR] '.$e->getMessage(), ['path'=>$this->getPathOf($q)]);
            return [];
        }
    }

    /** Ambil path dari Query untuk logging */
    private function getPathOf(Query $q): string
    {
        try {
            $ref = new \ReflectionClass($q);
            $prop = $ref->getProperty('query');
            $prop->setAccessible(true);
            return (string) $prop->getValue($q);
        } catch (\Throwable $e) { return 'unknown'; }
    }

    /* ------------------- INTERFACE ------------------- */
    public function interfaces(): array
    {
        return $this->safeQuery(new Query('/interface/print'));
    }

    public function monitorInterface(string $iface): array
    {
        try {
            $q = (new Query('/interface/monitor-traffic'))
                ->equal('interface', $iface)
                ->equal('once', '');
            $r = $this->client->query($q)->read();
            $row = $r[0] ?? [];
            $rx = isset($row['rx-bits-per-second']) ? (int)$row['rx-bits-per-second'] : 0;
            $tx = isset($row['tx-bits-per-second']) ? (int)$row['tx-bits-per-second'] : 0;
            return ['rx'=>$rx,'tx'=>$tx];
        } catch (\Throwable $e) {
            \Log::error('[ROS_ERR] monitor', ['iface'=>$iface, 'err'=>$e->getMessage()]);
            return ['rx'=>0,'tx'=>0];
        }
    }

    public function addVlan(string $name, string $iface, int $vid): void
    {
        \Log::info('[ROS_CMD] vlan.add', compact('name','iface','vid'));
        $q = (new Query('/interface/vlan/add'))
            ->equal('name', $name)
            ->equal('interface', $iface)
            ->equal('vlan-id', $vid);
        $this->safeQuery($q);
    }

    public function addBridge(string $name): void
    {
        \Log::info('[ROS_CMD] bridge.add', compact('name'));
        $q = (new Query('/interface/bridge/add'))
            ->equal('name', $name);
        $this->safeQuery($q);
    }

    public function addBridgePort(string $bridge, string $iface): void
    {
        \Log::info('[ROS_CMD] bridge.port.add', compact('bridge','iface'));
        $q = (new Query('/interface/bridge/port/add'))
            ->equal('bridge', $bridge)
            ->equal('interface', $iface);
        $this->safeQuery($q);
    }

    /* ------------------- IP STATIC (Address List) ------------------- */
    public function addToAddressList(string $list, string $ip, string $comment=''): void
    {
        \Log::info('[ROS_CMD] address-list.add', compact('list','ip'));
        $q = (new Query('/ip/firewall/address-list/add'))
            ->equal('list', $list)
            ->equal('address', $ip);
        if ($comment !== '') {
            $q->equal('comment', $comment);
        }
        $this->safeQuery($q);
    }

    public function removeFromAddressList(string $list, string $ip): void
    {
        \Log::info('[ROS_CMD] address-list.remove', compact('list','ip'));
        $id = $this->findId('/ip/firewall/address-list', ['?list' => $list, '?address' => $ip]);
        if ($id) {
            $this->safeQuery((new Query('/ip/firewall/address-list/remove'))->equal('.id', $id));
        }
    }

    protected function findId(string $path, array $filters)
    {
        $q = new Query($path.'/print');
        foreach ($filters as $k => $v) {
            $q->where($k, $v);
        }
        $r = $this->safeQuery($q);
        return $r[0]['.id'] ?? null;
    }

    /* ------------------- PPPoE ------------------- */
    public function pppSecrets(): array
    {
        return $this->safeQuery(new Query('/ppp/secret/print'));
    }

    public function pppActive(): array
    {
        return $this->safeQuery(new Query('/ppp/active/print'));
    }

    public function pppAdd(string $name, string $password, string $profile='default'): void
    {
        \Log::info('[ROS_CMD] ppp.add', compact('name','profile'));
        $q = (new Query('/ppp/secret/add'))
            ->equal('name', $name)
            ->equal('password', $password);
        if ($profile !== '') {
            $q->equal('profile', $profile);
        }
        $this->safeQuery($q);
    }

    public function pppSet(string $name, array $attrs): void
    {
        \Log::info('[ROS_CMD] ppp.set', ['name'=>$name,'attrs'=>$attrs]);
        $id = $this->findId('/ppp/secret', ['?name' => $name]);
        if (!$id) return;

        $q = (new Query('/ppp/secret/set'))->equal('.id', $id);
        foreach ($attrs as $k => $v) {
            if ($v === null) continue;
            $q->equal($k, $v);
        }
        $this->safeQuery($q);
    }

    public function pppRemove(string $name): void
    {
        \Log::info('[ROS_CMD] ppp.remove', compact('name'));
        $id = $this->findId('/ppp/secret', ['?name' => $name]);
        if ($id) {
            $this->safeQuery((new Query('/ppp/secret/remove'))->equal('.id', $id));
        }
    }
}
