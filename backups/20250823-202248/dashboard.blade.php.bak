@extends('layouts.app')
@section('content')
<div class="container mx-auto px-2 md:px-4">
  <div class="mb-4 flex gap-2">
    <a href="{{ route('mikrotik.index') }}" class="btn btn-secondary">Table List</a>
    <a href="{{ route('mikrotik.dashboard',$mikrotik) }}" class="btn btn-primary">Dashboard</a>
    <a href="{{ route('mikrotik.pppoe',$mikrotik) }}" class="btn btn-secondary">PPPoE</a>
    <a href="{{ route('mikrotik.ipstatic',$mikrotik) }}" class="btn btn-secondary">IP Static</a>
  </div>

  <div class="card bg-slate-900/60 border border-slate-800">
    <div class="card-body space-y-4">
      <div>
        <label class="block text-sm mb-1">Pilih interface untuk dimonitor</label>
        <div class="flex flex-wrap items-center gap-2">
          <select id="iface" class="form-select min-w-[280px]">
            <option value="" disabled selected>— pilih interface —</option>
            @foreach($if as $row)
              @php $name=$row['name']??''; $type=$row['type']??''; @endphp
              <option value="{{ $name }}">{{ $name }} {{ $type? '(' . $type . ')' : '' }}</option>
            @endforeach
          </select>
          <button id="btnAdd" class="btn btn-secondary">Tambah</button>
          <button id="btnStart" class="btn btn-primary">Mulai</button>
          <button id="btnStop"  class="btn btn-outline">Stop</button>
          <span class="text-xs px-2 py-0.5 rounded bg-emerald-500/20 text-emerald-300 border border-emerald-600/30">hotfix-v4</span>
        </div>
        <div id="mk-note" class="text-rose-300 text-sm mt-2"></div>
      </div>

      <div id="chips" class="flex flex-wrap gap-2"></div>

      <div id="cards" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4"></div>

      <div class="text-xs text-slate-400">Polling tiap 2 detik setelah klik <b>Mulai</b>.</div>
    </div>
  </div>
</div>

<script>
(function(){
  if(window.__mkmon_v4) return; window.__mkmon_v4=true;

  const tok='{{ csrf_token() }}';
  const urlG='{{ route('mikrotik.monitor',['mikrotik'=>$mikrotik->id]) }}'; // GET
  const urlP='{{ url('/mkmon/'.$mikrotik->id) }}'; // POST -> controller
  const urlX='{{ url('/monx/'.$mikrotik->id) }}';  // POST -> direct

  const sel=document.getElementById('iface');
  const chips=document.getElementById('chips');
  const cards=document.getElementById('cards');
  const note=document.getElementById('mk-note');
  const btnAdd=document.getElementById('btnAdd');
  const btnStart=document.getElementById('btnStart');
  const btnStop=document.getElementById('btnStop');

  const list=new Set();
  let timer=null;

  const fmt=n=>{ const u=['bps','Kbps','Mbps','Gbps']; let i=0,x=Number(n||0); while(x>=1000&&i<u.length-1){x/=1000;i++;} return x.toFixed(2)+' '+u[i]; }
  const say=m=>{ if(note) note.textContent=m||''; }

  function makeCard(iface){
    const id=iface.replace(/[^a-zA-Z0-9_-]/g,'_');
    const wrap=document.createElement('div');
    wrap.className='p-4 rounded-lg bg-slate-900/70 border border-slate-800';
    wrap.innerHTML=`
      <div class="text-sm text-slate-400 mb-1">${iface}</div>
      <div class="grid grid-cols-2 gap-4">
        <div><div class="text-slate-400 text-xs">RX</div><div id="rxN_${id}" class="text-xl font-semibold">0 bps</div><progress id="rxB_${id}" max="10000000000" value="0" class="w-full"></progress></div>
        <div><div class="text-slate-400 text-xs">TX</div><div id="txN_${id}" class="text-xl font-semibold">0 bps</div><progress id="txB_${id}" max="10000000000" value="0" class="w-full"></progress></div>
      </div>
    `;
    return wrap;
  }
  function ensureCard(iface){
    const id=iface.replace(/[^a-zA-Z0-9_-]/g,'_');
    if(!document.getElementById('rxN_'+id)){
      cards.appendChild(makeCard(iface));
    }
  }
  function renderChips(){
    chips.innerHTML='';
    [...list].forEach(iface=>{
      const span=document.createElement('span');
      span.className='px-2 py-1 bg-slate-800 border border-slate-700 rounded text-xs flex items-center gap-2';
      span.innerHTML=`${iface} <button class="text-rose-300 hover:text-rose-400" title="Hapus">&times;</button>`;
      span.querySelector('button').onclick=()=>{
        list.delete(iface);
        const id=iface.replace(/[^a-zA-Z0-9_-]/g,'_');
        const n=document.getElementById('rxN_'+id); if(n) n.closest('div.p-4').remove();
        renderChips();
      };
      chips.appendChild(span);
    });
  }

  btnAdd.onclick=()=>{
    const v=sel && sel.value; if(!v){ say('Pilih interface dulu'); return; }
    list.add(v); ensureCard(v); renderChips(); say('');
  };

  btnStart.onclick=()=>{
    if(timer){ clearInterval(timer); }
    if(list.size===0){ say('Tambah minimal 1 interface'); return; }
    async function fetchOne(iface){
      try{
        let r=await fetch(urlG+'?iface='+encodeURIComponent(iface), {method:'GET'});
        if(!r.ok){ r=await fetch(urlP,{method:'POST',headers:{'Content-Type':'application/json','X-CSRF-TOKEN':tok},body:JSON.stringify({iface})}); }
        if(!r.ok){ r=await fetch(urlX,{method:'POST',headers:{'Content-Type':'application/json','X-CSRF-TOKEN':tok},body:JSON.stringify({iface})}); }
        if(!r.ok) throw new Error('HTTP '+r.status);
        const d=await r.json();
        const id=iface.replace(/[^a-zA-Z0-9_-]/g,'_');
        const rx=Number(d.rx||0), tx=Number(d.tx||0);
        const rxN=document.getElementById('rxN_'+id), txN=document.getElementById('txN_'+id);
        const rxB=document.getElementById('rxB_'+id), txB=document.getElementById('txB_'+id);
        if(rxN){ rxN.textContent=fmt(rx); } if(txN){ txN.textContent=fmt(tx); }
        if(rxB){ rxB.value=rx; }         if(txB){ txB.value=tx; }
      }catch(e){ /* diam, kartu lain tetap jalan */ }
    }
    async function tick(){ await Promise.all([...list].map(fetchOne)); }
    tick(); timer=setInterval(tick,2000); say('');
  };

  btnStop.onclick=()=>{ if(timer){ clearInterval(timer); timer=null; } };

})();
</script>
@endsection
