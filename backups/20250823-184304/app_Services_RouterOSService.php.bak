<?php
namespace App\Services;

use App\Models\Mikrotik;
use RouterOS\Client;

class RouterOSService
{
    protected Mikrotik $dev;
    protected Client $client;

    public function __construct(Mikrotik $mikrotik)
    {
        $this->dev = $mikrotik;
        $this->client = $this->makeClient($mikrotik);
    }

    protected function makeClient(Mikrotik $m): Client
    {
        $cfg = [
            'host'     => $m->host,
            'user'     => $m->username,
            'pass'     => $m->password,      // plaintext dari DB
            'port'     => $m->port ?: 8728,
            'timeout'  => 5,
            'attempts' => 1,
        ];
        if (class_exists('\Log')) {
            \Log::info('ROS connect SVC', [
                'host'=>$cfg['host'],'port'=>$cfg['port'],
                'user'=>$cfg['user'],'pwd_len'=>strlen((string)$cfg['pass']),
            ]);
        }
        try {
            $c = new Client($cfg);
            if (class_exists('\Log')) {
                \Log::info('ROS connected OK', ['host'=>$cfg['host'],'port'=>$cfg['port'],'user'=>$cfg['user']]);
            }
            return $c;
        } catch (\Throwable $e) {
            throw new \RuntimeException($this->friendly($e), 0, $e);
        }
    }

    protected function friendly(\Throwable $e): string
    {
        $msg = $e->getMessage();
        if (!$msg) return 'RouterOS error';
        if (stripos($msg,'user name or password')!==false || stripos($msg,'login failed')!==false) {
            return 'Invalid username or password supplied.';
        }
        if (stripos($msg,'syntax error')!==false) return 'Syntax error (cek PHP 7.4 / named-args).';
        return $msg;
    }

    /* -------- Interface -------- */
    public function interfaces(): array {
        try { return $this->client->query('/interface/print')->read(); }
        catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }

    public function monitorInterface(string $name): array
    {
        try {
            $res = $this->client->query('/interface/monitor-traffic', [
                'interface'=>$name, 'once'=>'true'
            ])->read();
            $row = is_array($res) && isset($res[0]) ? $res[0] : [];
            $rx = (int)($row['rx-bits-per-second'] ?? $row['rx-bps'] ?? $row['rx'] ?? 0);
            $tx = (int)($row['tx-bits-per-second'] ?? $row['tx-bps'] ?? $row['tx'] ?? 0);
            return ['rx'=>$rx, 'tx'=>$tx];
        } catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }

    public function addVlan(string $name, string $iface, int $vid): void {
        try { $this->client->query('/interface/vlan/add', ['name'=>$name,'interface'=>$iface,'vlan-id'=>$vid])->read(); }
        catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }
    public function addBridge(string $bridge): void {
        try { $this->client->query('/interface/bridge/add',['name'=>$bridge])->read(); }
        catch (\Throwable $e) {
            if (stripos($e->getMessage(),'already')===false)
                throw new \RuntimeException($this->friendly($e), 0, $e);
        }
    }
    public function addBridgePort(string $bridge, string $iface): void {
        try { $this->client->query('/interface/bridge/port/add',['bridge'=>$bridge,'interface'=>$iface])->read(); }
        catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }

    /* -------- PPPoE -------- */
    protected function findId(string $path, array $where): ?string {
        $res = $this->client->query($path.'/print', $where)->read();
        return isset($res[0]['.id']) ? $res[0]['.id'] : null;
    }
    public function pppSecrets(): array {
        try { return $this->client->query('/ppp/secret/print')->read(); }
        catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }
    public function pppActive(): array {
        try { return $this->client->query('/ppp/active/print')->read(); }
        catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }
    public function pppAdd(string $name, string $password, string $profile='default'): void {
        try { $this->client->query('/ppp/secret/add',['name'=>$name,'password'=>$password,'profile'=>$profile])->read(); }
        catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }
    public function pppSet(string $name, array $attrs): void {
        try {
            $id = $this->findId('/ppp/secret', ['?name'=>$name]);
            if (!$id) throw new \RuntimeException('Secret not found: '.$name);
            $this->client->query('/ppp/secret/set', array_merge(['.id'=>$id], $attrs))->read();
        } catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }
    public function pppRemove(string $name): void {
        try {
            $id = $this->findId('/ppp/secret', ['?name'=>$name]);
            if ($id) $this->client->query('/ppp/secret/remove', ['.id'=>$id])->read();
        } catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }

    /* -------- PPP PROFILES -------- */
    public function pppProfiles(): array {
        try { return $this->client->query('/ppp/profile/print')->read(); }
        catch (\Throwable $e) { throw new \RuntimeException($this->friendly($e), 0, $e); }
    }

    public function pppProfileAdd(string $name, string $rateLimit, ?string $parentQueue=null): void
    {
        try {
            $attrs = [
                'name'       => $name,
                'rate-limit' => $rateLimit,
                'use-queue'  => 'default',
            ];
            if ($parentQueue) {
                $script = ':local u $user; :do { /queue simple set [find name=$u] parent="'.
                          addslashes($parentQueue).
                          '" } on-error={} ;';
                $attrs['on-up'] = $script;
            }
            $this->client->query('/ppp/profile/add', $attrs)->read();
        } catch (\Throwable $e) {
            throw new \RuntimeException($this->friendly($e), 0, $e);
        }
    }
}
