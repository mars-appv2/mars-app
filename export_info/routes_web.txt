<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Auth;

/* === Controllers === */
use App\Http\Controllers\HomeController;
use App\Http\Controllers\UsersController;
use App\Http\Controllers\TrafficTargetsController;
use App\Http\Controllers\TrafficController;
use App\Http\Controllers\AuditLogController;
use App\Http\Controllers\MikrotikController;
use App\Http\Controllers\SettingsController;

/* UI baru */
use App\Http\Controllers\RadiusUiController;
/* BillingUiController di-load di routes/billing.php */

/* Fitur lama (RAW) â€” dipertahankan, diprefix baru) */
use App\Http\Controllers\RadiusUserController;
use App\Http\Controllers\RadiusSessionController;
use App\Http\Controllers\BillingController;

/* ======================================================================
| Root & Auth
|======================================================================*/
Route::get('/', fn () => redirect()->route('dashboard'));
Auth::routes();

/* File route tambahan (punya kamu) */
require __DIR__.'/mars_modules.php';
require __DIR__.'/traffic.php';
require __DIR__.'/payments.php';
require __DIR__.'/monitor_groups.php';
require __DIR__.'/settings.php';
require __DIR__.'/backups.php';

/* >>>> Tambahkan ini: pisahkan Billing ke file sendiri <<<< */
require __DIR__.'/billing.php';

/* ======================================================================
| Area login
|======================================================================*/
Route::middleware(['auth'])->group(function () {

    /* ---------------- Dashboard ---------------- */
    Route::get('/dashboard', [HomeController::class, 'index'])->name('dashboard');

    /* ---------------- Audit Log (admin only) ---------------- */
    Route::get('/logs', [AuditLogController::class, 'index'])
        ->middleware('role:admin')
        ->name('logs.index');

    /* ---------------- API kecil untuk dashboard ---------------- */
    Route::get(
        '/api/mikrotik/{mikrotik}/interfaces',
        [MikrotikController::class,'interfacesJson']
    )->name('mikrotik.ifaces.json');

    /* ---------------- Users (CRUD minimal) ---------------- */
    Route::get   ('/users',             [UsersController::class, 'index'])->name('users.index');
    Route::get   ('/users/create',      [UsersController::class, 'create'])->name('users.create');
    Route::post  ('/users',             [UsersController::class, 'store'])->name('users.store');
    Route::get   ('/users/{user}/edit', [UsersController::class,'edit'])->name('users.edit');
    Route::put   ('/users/{user}',      [UsersController::class,'update'])->name('users.update');
    Route::delete('/users/{user}',      [UsersController::class,'destroy'])->name('users.destroy');

    /* ==================================================================
    | MIKROTIK  (izin: manage mikrotik)
    |==================================================================*/
    Route::prefix('mikrotik')
        ->name('mikrotik.')
        ->middleware('permission:manage mikrotik')
        ->group(function () {

            // Index & tambah
            Route::get ('/',           [MikrotikController::class, 'index'])->name('index');
            Route::post('/',           [MikrotikController::class, 'store'])->name('store');

            // Edit / update / delete
            Route::get   ('/{mikrotik}/edit',   [MikrotikController::class,'edit'])->name('edit');
            Route::put   ('/{mikrotik}',        [MikrotikController::class,'update'])->name('update');
            Route::delete('/{mikrotik}',        [MikrotikController::class,'destroy'])->name('destroy');
            Route::post  ('/{mikrotik}/delete', [MikrotikController::class,'delete'])->name('delete'); // kompat

            // Dashboard & monitor
            Route::get ('/{mikrotik}/dashboard', [MikrotikController::class,'dashboard'])->name('dashboard');
            Route::get ('/{mikrotik}/monitor',   [MikrotikController::class,'monitor'])->name('monitor');
            Route::post ('/{mikrotik}/monitor/interface', [MikrotikController::class,'addInterfaceTarget'])
                ->name('monitor.addInterface');

            // PPPoE
            Route::get  ('/{mikrotik}/pppoe',            [MikrotikController::class,'pppIndex'])->name('pppoe');
            Route::post ('/{mikrotik}/pppoe/add',        [MikrotikController::class,'pppAdd'])->name('pppoe.add');
            Route::post ('/{mikrotik}/pppoe/edit',       [MikrotikController::class,'pppEdit'])->name('pppoe.edit');
            Route::post ('/{mikrotik}/pppoe/delete',     [MikrotikController::class,'pppoeDelete'])->name('pppoe.delete');
            Route::post ('/{mikrotik}/pppoe/profile/add',[MikrotikController::class,'pppProfileAdd'])->name('pppoe.profile.add');
            Route::post ('/{mikrotik}/pppoe/record',     [MikrotikController::class,'pppRecord'])->name('pppoe.record');

            // VLAN & Bridge
            Route::post ('/{mikrotik}/vlan',   [MikrotikController::class,'vlanCreate'])->name('vlan');
            Route::post ('/{mikrotik}/bridge', [MikrotikController::class,'bridgeCreate'])->name('bridge');

            // IP Static
            Route::get  ('/{mikrotik}/ip-static',         [MikrotikController::class,'ipStatic'])->name('ipstatic');
            Route::post ('/{mikrotik}/ip-static/add',     [MikrotikController::class,'ipStaticAdd'])->name('ipstatic.add');
            Route::post ('/{mikrotik}/ip-static/remove',  [MikrotikController::class,'ipStaticRemove'])->name('ipstatic.remove');
            Route::post ('/{mikrotik}/ip-static/record',  [MikrotikController::class,'ipStaticRecord'])->name('ipstatic.record');

            // Apply RADIUS ke router
            Route::post ('/{mikrotik}/radius/provision', [MikrotikController::class,'provisionRadiusAndRouter'])
                ->name('radius.provision');
        });

    // Shortcut buka device terakhir (opsional)
    Route::get('/mikrotik-latest', function () {
        $last = \App\Models\Mikrotik::orderByDesc('id')->first();
        return $last
            ? redirect()->route('mikrotik.dashboard', ['mikrotik' => $last->id])
            : redirect()->route('mikrotik.index');
    })->name('mikrotik.latest');

    // Fallback monitor endpoints (kompat lama)
    Route::post('/mkmon/{mikrotik}', [MikrotikController::class, 'monitor'])->name('mkmon');
    Route::post('/monq/{mikrotik}',  [MikrotikController::class, 'monitorQueue'])->name('monq');
    Route::post('/monx/{id}', function ($id, \Illuminate\Http\Request $r) {
        $m = \App\Models\Mikrotik::findOrFail($id);
        $iface = $r->input('iface');
        try {
            $c = new \RouterOS\Client([
                'host'=>$m->host,'user'=>$m->username,'pass'=>$m->password,
                'port'=>$m->port ?: 8728,'timeout'=>5,'attempts'=>1
            ]);
            $q = (new \RouterOS\Query('/interface/monitor-traffic'))
                ->equal('interface', $iface)->equal('once', 'true');
            $res = $c->query($q)->read();
            $rx = (int)($res[0]['rx-bits-per-second'] ?? 0);
            $tx = (int)($res[0]['tx-bits-per-second'] ?? 0);
            return response()->json(['rx'=>$rx,'tx'=>$tx]);
        } catch (\Throwable $e) {
            \Log::error('MONX fail: '.$e->getMessage());
            return response()->json(['rx'=>0,'tx'=>0,'err'=>$e->getMessage()], 500);
        }
    })->name('monx');

    /* ==================================================================
                      | RADIUS UI (izin standar)
    |==================================================================*/
    Route::prefix('radius')->name('radius.')->group(function () {
    	Route::get ('/users',           [\App\Http\Controllers\RadiusUiController::class,'users'])->name('users');
    	Route::post('/users',           [\App\Http\Controllers\RadiusUiController::class,'usersStore'])->name('users.store');
    	Route::post('/users/password',  [\App\Http\Controllers\RadiusUiController::class,'usersUpdatePassword'])->name('users.password');
    	Route::post('/users/plan',      [\App\Http\Controllers\RadiusUiController::class,'usersUpdatePlan'])->name('users.plan');
    	Route::post('/users/status',    [\App\Http\Controllers\RadiusUiController::class,'usersUpdateStatus'])->name('users.status');

    	// perbaiki mapping ke method yang benar
    	Route::post('/users/delete',    [\App\Http\Controllers\RadiusUiController::class,'usersDelete'])->name('users.delete');

    	// import users dari Mikrotik â†’ RADIUS (method: importUsers)
    	Route::post('/users/import',    [\App\Http\Controllers\RadiusUiController::class,'importUsers'])->name('users.import');

    	// NEW: bulk delete (dipakai oleh form / tombol "Hapus Terpilih" di Users)
    	Route::post('/users/bulk-delete', [\App\Http\Controllers\RadiusUiController::class,'usersBulkDelete'])->name('users.bulkDelete');

    	Route::get ('/sessions',        [\App\Http\Controllers\RadiusUiController::class,'sessions'])->name('sessions');
    });

    /* ========= Role User ============*/
    Route::middleware(['auth','role:admin'])->group(function () {
    	Route::get ('/settings/permissions',  [SettingsController::class,'permissions'])->name('settings.permissions');
    	Route::post('/settings/permissions',  [SettingsController::class,'permissionsSave'])->name('settings.permissions.save');
    });

});

