#!/usr/bin/env bash
# ==============================================================================
# Finance Module SAFE Installer (Laravel 7.x / PHP 7.4)
# ------------------------------------------------------------------------------
# Tujuan: pemasangan modul Finance **sangat aman & idempotent** tanpa merusak
# sistem existing. Script ini:
#  - Membuat file baru hanya jika belum ada
#  - Jika file sudah ada, **tidak** menimpa kecuali Anda setujui (prompt)
#  - Patch file secara hati-hati & hindari duplikasi
#  - Backup otomatis sebelum modifikasi (suffix .bak.<timestamp>)
#  - Validasi syntax PHP (php -l) pada file .php yang diubah
#  - Dapat di-run berulang kali (idempotent)
#
# Fiturnya mencakup: Core Finance (Accounts, Kas, Reports), **Jurnal Umum**,
# **Export CSV/PDF**, **AuditLog helper**, serta loader route yang aman.
#
# Usage:
#   bash install_finance_module_safe.sh [--yes] [--no-migrate] [--no-seed] \
#       [--no-addons] [--dry-run] [--force-replace]
# ==============================================================================
set -euo pipefail
IFS=$'\n\t'

# --------------------------- CONFIG & GLOBALS ---------------------------------
TS=$(date +%Y%m%d%H%M%S)
ROOT=$(pwd)
DRYRUN=false
ASSUME_YES=false
RUN_MIGRATE=true
RUN_SEED=true
ENABLE_ADDONS=true         # Jurnal Umum + Export CSV/PDF + AuditLog
FORCE_REPLACE=false        # replace tanpa prompt (tetap backup)

PHP_BIN=${PHP_BIN:-php}
COMPOSER_BIN=${COMPOSER_BIN:-composer}

SUMMARY=()
MODIFIED_PHP_FILES=()

# --------------------------- ARGS ---------------------------------------------
while [[ $# -gt 0 ]]; do
  case "$1" in
    --dry-run) DRYRUN=true; shift ;;
    --yes|-y) ASSUME_YES=true; shift ;;
    --no-migrate) RUN_MIGRATE=false; shift ;;
    --no-seed) RUN_SEED=false; shift ;;
    --no-addons) ENABLE_ADDONS=false; shift ;;
    --force-replace) FORCE_REPLACE=true; shift ;;
    *) echo "[warn] arg tidak dikenal: $1"; shift ;;
  esac
done

# --------------------------- UTIL FUNCS ---------------------------------------
say(){ printf "\033[1;36m[finance]\033[0m %s\n" "$*"; }
warn(){ printf "\033[1;33m[warn]\033[0m %s\n" "$*"; }
err(){ printf "\033[1;31m[err]\033[0m %s\n" "$*"; }
ask(){
  local q="$1"; local d="$2"
  if $ASSUME_YES; then echo "$d"; return 0; fi
  read -rp "$q [$d] " ans; echo "${ans:-$d}"
}
ensure_dir(){ $DRYRUN && { say "mkdir -p $1"; return; } ; mkdir -p "$1"; }
backup(){
  local f="$1"
  [[ -f "$f" ]] || return 0
  $DRYRUN && { say "backup $f -> $f.bak.$TS"; return; }
  cp "$f" "$f.bak.$TS"
  SUMMARY+=("backup $f -> $f.bak.$TS")
}
sha1(){ command shasum "$1" 2>/dev/null | awk '{print $1}' || command sha1sum "$1" | awk '{print $1}'; }

is_php_file(){ [[ "$1" == *.php ]] && [[ "$1" != *".blade.php"* ]]; }
php_lint(){
  local f="$1"
  is_php_file "$f" || return 0
  $DRYRUN && { say "php -l $f"; return; }
  if ! $PHP_BIN -l "$f" >/dev/null; then
    err "Syntax error: $f â€” mengembalikan dari backup"
    if [[ -f "$f.bak.$TS" ]]; then mv -f "$f.bak.$TS" "$f"; fi
    exit 1
  fi
  MODIFIED_PHP_FILES+=("$f")
}

write_file(){ # $1=path, $2=content
  local path="$1"; local content="$2"
  ensure_dir "$(dirname "$path")"
  if [[ -f "$path" ]]; then
    # bandingkan
    local tmpfile="$(mktemp)"; printf "%s" "$content" > "$tmpfile"
    if cmp -s "$path" "$tmpfile"; then
      rm -f "$tmpfile"; say "skip (identik): $path"; return
    fi
    if $FORCE_REPLACE; then choice="R"; else choice=$(ask "File $path sudah ada. Replace? (R)ep lace/(S)kip" "S"); fi
    if [[ "$choice" =~ ^[Rr]$ ]]; then
      $DRYRUN && { say "REPLACE $path"; rm -f "$tmpfile"; return; }
      backup "$path"
      mv -f "$tmpfile" "$path"
      php_lint "$path"
      SUMMARY+=("replace $path")
      return
    else
      rm -f "$tmpfile"; say "skip: $path"; return
    fi
  fi
  $DRYRUN && { say "create $path"; return; }
  printf "%s" "$content" > "$path"
  php_lint "$path"
  SUMMARY+=("create $path")
}

append_once(){ # $1=path $2=needle $3=content
  local path="$1"; local needle="$2"; local payload="$3"
  ensure_dir "$(dirname "$path")"
  [[ -f "$path" ]] || { $DRYRUN || touch "$path"; }
  if grep -Fq "$needle" "$path" 2>/dev/null; then
    say "skip append (sudah ada): $needle -> $path"; return
  fi
  if $DRYRUN; then say "append -> $path (needle: $needle)"; return; fi
  backup "$path"
  printf "\n%s\n" "$payload" >> "$path"
  php_lint "$path"
  SUMMARY+=("append $needle -> $path")
}

insert_group_if_missing(){ # safe: buat group baru jika belum ada
  local path="$1"; shift
  local group_payload="$1"
  if grep -Eq "Route::(middleware|prefix)\(.*'finance'" "$path" 2>/dev/null; then
    say "route group finance sudah ada (tidak menambah group baru)"
    return 0
  fi
  append_once "$path" "FINANCE_ROUTE_GROUP" "$group_payload"
}

patch_controller_append_method(){ # $1=file $2=method_signature_grep $3=method_payload
  local file="$1"; local sig="$2"; local code="$3"
  if [[ ! -f "$file" ]]; then
    write_file "$file" "$code" # jika file berisi class penuh (untuk create pertama)
    return
  fi
  if grep -Fq "$sig" "$file"; then
    say "skip method (sudah ada): $sig di $file"; return
  fi
  if $DRYRUN; then say "patch +method $sig -> $file"; return; fi
  backup "$file"
  # sisipkan sebelum brace penutup terakhir kelas
  perl -0777 -pe "s/\n\}\s*\z/\n\n$code\n}\n/s" "$file" > "$file.tmp" && mv "$file.tmp" "$file"
  php_lint "$file"
  SUMMARY+=("append method $sig -> $file")
}

# --------------------------- PRE-CHECKS ---------------------------------------
if [[ ! -f artisan ]]; then err "Jalankan dari root Laravel (file artisan tidak ditemukan)"; exit 1; fi
command -v "$PHP_BIN" >/dev/null || { err "php tidak ditemukan"; exit 1; }
command -v "$COMPOSER_BIN" >/dev/null || warn "composer tidak ditemukan di PATH (akan dicoba perintah 'composer')"

say "Mulai instalasi SAFE (addons: $ENABLE_ADDONS, dry-run: $DRYRUN, force: $FORCE_REPLACE)"

# --------------------------- CONTENTS (TEMPLATES) -----------------------------
read -r -d '' MIGRATION <<'PHP'
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFinanceTables extends Migration
{
    public function up()
    {
        if (!Schema::hasTable('accounts')) {
            Schema::create('accounts', function (Blueprint $table) {
                $table->bigIncrements('id');
                $table->string('code')->unique();
                $table->string('name');
                $table->unsignedTinyInteger('type'); // 1 A, 2 L, 3 E, 4 R, 5 X
                $table->unsignedBigInteger('parent_id')->nullable();
                $table->boolean('is_cash')->default(false);
                $table->boolean('is_active')->default(true);
                $table->timestamps();
                $table->foreign('parent_id')->references('id')->on('accounts')->onDelete('set null');
            });
        }
        if (!Schema::hasTable('journal_entries')) {
            Schema::create('journal_entries', function (Blueprint $table) {
                $table->bigIncrements('id');
                $table->date('date');
                $table->string('ref')->nullable();
                $table->text('description')->nullable();
                $table->unsignedBigInteger('created_by')->nullable();
                $table->timestamp('posted_at')->nullable();
                $table->timestamps();
                $table->index(['date']);
            });
        }
        if (!Schema::hasTable('journal_lines')) {
            Schema::create('journal_lines', function (Blueprint $table) {
                $table->bigIncrements('id');
                $table->unsignedBigInteger('journal_entry_id');
                $table->unsignedBigInteger('account_id');
                $table->decimal('debit',18,2)->default(0);
                $table->decimal('credit',18,2)->default(0);
                $table->string('memo')->nullable();
                $table->timestamps();
                $table->foreign('journal_entry_id')->references('id')->on('journal_entries')->onDelete('cascade');
                $table->foreign('account_id')->references('id')->on('accounts');
                $table->index(['account_id']);
            });
        }
    }

    public function down()
    {
        Schema::dropIfExists('journal_lines');
        Schema::dropIfExists('journal_entries');
        Schema::dropIfExists('accounts');
    }
}
PHP

read -r -d '' MODEL_ACCOUNT <<'PHP'
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
class Account extends Model{
    protected $fillable=['code','name','type','parent_id','is_cash','is_active'];
    const TYPE_ASSET=1,TYPE_LIAB=2,TYPE_EQUITY=3,TYPE_REVENUE=4,TYPE_EXPENSE=5;
    function parent(){return $this->belongsTo(Account::class,'parent_id');}
    function children(){return $this->hasMany(Account::class,'parent_id');}
    function lines(){return $this->hasMany(JournalLine::class);} 
    function typeLabel(){return [1=>'Asset',2=>'Liability',3=>'Equity',4=>'Revenue',5=>'Expense'][$this->type]??'Unknown';}
}
PHP

read -r -d '' MODEL_JE <<'PHP'
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
class JournalEntry extends Model{
    protected $fillable=['date','ref','description','created_by','posted_at'];
    protected $dates=['date','posted_at'];
    function lines(){return $this->hasMany(JournalLine::class);} }
PHP

read -r -d '' MODEL_JL <<'PHP'
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
class JournalLine extends Model{
    protected $fillable=['journal_entry_id','account_id','debit','credit','memo'];
    function entry(){return $this->belongsTo(JournalEntry::class,'journal_entry_id');}
    function account(){return $this->belongsTo(Account::class,'account_id');}
}
PHP

read -r -d '' CTRL_ACCOUNT <<'PHP'
<?php
namespace App\Http\Controllers\Finance;
use App\Http\Controllers\Controller; use App\Models\Account; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB;
class AccountController extends Controller{
  function index(){ $accounts=Account::orderBy('code')->get(); $parents=Account::orderBy('code')->get(); return view('finance.accounts.index',compact('accounts','parents')); }
  function store(Request $r){ $d=$r->validate(['code'=>'required|string|max:50|unique:accounts,code','name'=>'required|string|max:150','type'=>'required|in:1,2,3,4,5','parent_id'=>'nullable|exists:accounts,id','is_cash'=>'nullable|boolean','is_active'=>'nullable|boolean']); $d['is_cash']=(bool)($d['is_cash']??false); $d['is_active']=(bool)($d['is_active']??true); Account::create($d); return back()->with('ok','Akun ditambahkan'); }
  function update(Request $r, Account $account){ $d=$r->validate(['code'=>'required|string|max:50|unique:accounts,code,'.$account->id,'name'=>'required|string|max:150','type'=>'required|in:1,2,3,4,5','parent_id'=>'nullable|exists:accounts,id','is_cash'=>'nullable|boolean','is_active'=>'nullable|boolean']); $d['is_cash']=(bool)($d['is_cash']??false); $d['is_active']=(bool)($d['is_active']??true); $account->update($d); return back()->with('ok','Akun diupdate'); }
  function destroy(Account $account){ DB::transaction(function() use($account){ if($account->lines()->exists()) abort(422,'Akun memiliki transaksi, tidak dapat dihapus.'); $account->delete(); }); return back()->with('ok','Akun dihapus'); }
}
PHP

read -r -d '' CTRL_JOURNAL_FULL <<'PHP'
<?php
namespace App\Http\Controllers\Finance;
use App\Http\Controllers\Controller; use App\Models\{Account,JournalEntry,JournalLine}; use Illuminate\Http\Request; use Illuminate\Support\Facades\{Auth,DB};
class JournalController extends Controller{
  function kas(){ $cashAccounts=Account::where('is_cash',true)->orderBy('code')->get(); $allAccounts=Account::orderBy('code')->get(); $recent=JournalEntry::with(['lines.account'])->orderBy('date','desc')->orderBy('id','desc')->limit(25)->get(); return view('finance.journal.kas',compact('cashAccounts','allAccounts','recent')); }
  function storeKas(Request $r){ $d=$r->validate(['date'=>'required|date','type'=>'required|in:in,out','cash_account_id'=>'required|exists:accounts,id','counter_account_id'=>'required|exists:accounts,id','amount'=>'required|numeric|min:0.01','description'=>'nullable|string','ref'=>'nullable|string|max:50']); $cash=Account::findOrFail($d['cash_account_id']); if(!$cash->is_cash) return back()->withErrors(['cash_account_id'=>'Akun dipilih bukan akun kas/bank.']); DB::transaction(function() use($d){ $e=JournalEntry::create(['date'=>$d['date'],'ref'=>$d['ref']??null,'description'=>$d['description']??null,'created_by'=>Auth::id(),'posted_at'=>now()]); $cid=(int)$d['counter_account_id']; $amt=round((float)$d['amount'],2); if($d['type']==='in'){ JournalLine::create(['journal_entry_id'=>$e->id,'account_id'=>(int)$d['cash_account_id'],'debit'=>$amt,'credit'=>0,'memo'=>'Kas Masuk']); JournalLine::create(['journal_entry_id'=>$e->id,'account_id'=>$cid,'debit'=>0,'credit'=>$amt,'memo'=>'Kas Masuk (lawan)']); } else { JournalLine::create(['journal_entry_id'=>$e->id,'account_id'=>$cid,'debit'=>$amt,'credit'=>0,'memo'=>'Kas Keluar']); JournalLine::create(['journal_entry_id'=>$e->id,'account_id'=>(int)$d['cash_account_id'],'debit'=>0,'credit'=>$amt,'memo'=>'Kas Keluar (lawan)']); } }); return back()->with('ok','Transaksi kas tersimpan.'); }
  // --- Addon: Jurnal Umum ---
  function jurnalUmum(){ $accounts=Account::orderBy('code')->get(); return view('finance.journal.jurnal_umum',compact('accounts')); }
  function storeJurnalUmum(Request $r){ $d=$r->validate(['date'=>'required|date','ref'=>'nullable|string|max:50','description'=>'nullable|string','lines'=>'required|array|min:2','lines.*.account_id'=>'required|exists:accounts,id','lines.*.debit'=>'nullable|numeric|min:0','lines.*.credit'=>'nullable|numeric|min:0','lines.*.memo'=>'nullable|string|max:255']); $D=0; $C=0; $clean=[]; foreach($d['lines'] as $i=>$l){ $dd=round((float)($l['debit']??0),2); $cc=round((float)($l['credit']??0),2); if($dd>0 && $cc>0) return back()->withErrors('Baris '.($i+1).': tidak boleh debit & kredit sekaligus.')->withInput(); if($dd==0 && $cc==0) continue; $clean[]=['account_id'=>(int)$l['account_id'],'debit'=>$dd,'credit'=>$cc,'memo'=>$l['memo']??null]; $D+=$dd; $C+=$cc; } if(count($clean)<2) return back()->withErrors('Minimal 2 baris (debit & kredit).')->withInput(); if(abs($D-$C)>0.009) return back()->withErrors('Total debit harus sama dengan total kredit.')->withInput(); DB::transaction(function() use($d,$clean){ $e=JournalEntry::create(['date'=>$d['date'],'ref'=>$d['ref']??null,'description'=>$d['description']??null,'created_by'=>Auth::id(),'posted_at'=>now()]); foreach($clean as $l){ JournalLine::create(['journal_entry_id'=>$e->id]+$l); } }); return back()->with('ok','Jurnal umum tersimpan.'); }
}
PHP

read -r -d '' CTRL_REPORT <<'PHP'
<?php
namespace App\Http\Controllers\Finance;
use App\Http\Controllers\Controller; use App\Models\{Account,JournalLine}; use Illuminate\Http\Request;
class ReportController extends Controller{
  static function signedBalance(int $type,float $d,float $c){return in_array($type,[1,5])?round($d-$c,2):round($c-$d,2);} 
  function ledger(Request $r){ $id=(int)$r->input('account_id'); $start=$r->input('start'); $end=$r->input('end'); $accounts=Account::orderBy('code')->get(); $account=$id?Account::find($id):null; $lines=collect(); $opening=0.0; if($account){ $qOpen=JournalLine::where('account_id',$account->id); if($start) $qOpen->whereHas('entry',fn($q)=>$q->where('date','<',$start)); $opening=self::signedBalance($account->type,(float)$qOpen->sum('debit'),(float)$qOpen->sum('credit')); $q=JournalLine::with('entry')->where('account_id',$account->id); if($start) $q->whereHas('entry',fn($qq)=>$qq->where('date','>=',$start)); if($end) $q->whereHas('entry',fn($qq)=>$qq->where('date','<=',$end)); $lines=$q->get()->sortBy(fn($l)=>sprintf('%s-%09d',$l->entry->date->format('Ymd'),$l->entry->id))->values(); } return view('finance.reports.ledger',compact('accounts','account','lines','opening','start','end')); }
  function cashLedger(Request $r){ $cash=Account::where('is_cash',true)->orderBy('code')->get(); $id=(int)$r->input('account_id'); $start=$r->input('start'); $end=$r->input('end'); $account=$id?Account::find($id):$cash->first(); $lines=collect(); $opening=0.0; if($account){ $qOpen=JournalLine::where('account_id',$account->id); if($start) $qOpen->whereHas('entry',fn($q)=>$q->where('date','<',$start)); $opening=self::signedBalance($account->type,(float)$qOpen->sum('debit'),(float)$qOpen->sum('credit')); $q=JournalLine::with('entry')->where('account_id',$account->id); if($start) $q->whereHas('entry',fn($qq)=>$qq->where('date','>=',$start)); if($end) $q->whereHas('entry',fn($qq)=>$qq->where('date','<=',$end)); $lines=$q->get()->sortBy(fn($l)=>sprintf('%s-%09d',$l->entry->date->format('Ymd'),$l->entry->id))->values(); } return view('finance.reports.cash_ledger',compact('cash','account','lines','opening','start','end'))->with('cashAccounts',$cash); }
  function trialBalance(Request $r){ $start=$r->input('start'); $end=$r->input('end'); $accounts=Account::where('is_active',true)->orderBy('code')->get(); $rows=[]; $TD=0; $TC=0; foreach($accounts as $a){ $q=JournalLine::where('account_id',$a->id); if($start) $q->whereHas('entry',fn($qq)=>$qq->where('date','>=',$start)); if($end) $q->whereHas('entry',fn($qq)=>$qq->where('date','<=',$end)); $d=(float)$q->sum('debit'); $c=(float)$q->sum('credit'); $bal=self::signedBalance($a->type,$d,$c); $de=0; $cr=0; if(in_array($a->type,[1,5])){ if($bal>=0){$de=$bal;} else {$cr=abs($bal);} } else { if($bal>=0){$cr=$bal;} else {$de=abs($bal);} } $rows[]=['a'=>$a,'debitCol'=>$de,'creditCol'=>$cr]; $TD+=$de; $TC+=$cr; } return view('finance.reports.trial_balance',compact('rows','TD','TC','start','end'))->with(['totalDebit'=>$TD,'totalCredit'=>$TC]); }
  function balanceSheet(Request $r){ $as=$r->input('as_of'); $grp=['assets'=>[],'liabilities'=>[],'equity'=>[]]; $sum=['assets'=>0,'liabilities'=>0,'equity'=>0]; $acc=Account::where('is_active',true)->orderBy('code')->get(); $rev=0; $exp=0; foreach($acc as $a){ $q=JournalLine::where('account_id',$a->id); if($as) $q->whereHas('entry',fn($qq)=>$qq->where('date','<=',$as)); $d=(float)$q->sum('debit'); $c=(float)$q->sum('credit'); $bal=self::signedBalance($a->type,$d,$c); switch($a->type){ case 1:$grp['assets'][]=[$a,$bal];$sum['assets']+=$bal;break; case 2:$grp['liabilities'][]=[$a,$bal];$sum['liabilities']+=$bal;break; case 3:$grp['equity'][]=[$a,$bal];$sum['equity']+=$bal;break; case 4:$rev+=$bal;break; case 5:$exp+=$bal;break; } } $ni=$rev-$exp; $sum['equity']+=$ni; return view('finance.reports.balance_sheet',compact('grp','sum','ni','as'))->with(['grouped'=>$grp,'netIncome'=>$ni,'asOf'=>$as]); }
}
PHP

read -r -d '' ROUTES_GROUP <<'PHP'
<?php
use Illuminate\Support\Facades\Route; use App\Http\Controllers\Finance\{AccountController,JournalController,ReportController};
Route::middleware(['web','auth'])->prefix('finance')->name('finance.')->group(function(){
    Route::get('/accounts',[AccountController::class,'index'])->name('accounts');
    Route::post('/accounts',[AccountController::class,'store'])->name('accounts.store');
    Route::post('/accounts/{account}',[AccountController::class,'update'])->name('accounts.update');
    Route::delete('/accounts/{account}',[AccountController::class,'destroy'])->name('accounts.delete');

    Route::get('/kas',[JournalController::class,'kas'])->name('kas');
    Route::post('/kas',[JournalController::class,'storeKas'])->name('kas.store');

    Route::get('/ledger',[ReportController::class,'ledger'])->name('ledger');
    Route::get('/cash-ledger',[ReportController::class,'cashLedger'])->name('cash');
    Route::get('/trial-balance',[ReportController::class,'trialBalance'])->name('trial');
    Route::get('/balance-sheet',[ReportController::class,'balanceSheet'])->name('balance');
}); // FINANCE_ROUTE_GROUP
PHP

read -r -d '' ROUTES_ADDONS <<'PHP'
<?php
use Illuminate\Support\Facades\Route; use App\Http\Controllers\Finance\{JournalController,ReportController};
Route::middleware(['web','auth'])->prefix('finance')->name('finance.')->group(function(){
    // Jurnal Umum
    Route::get('/jurnal-umum',[JournalController::class,'jurnalUmum'])->name('jurnal');
    Route::post('/jurnal-umum',[JournalController::class,'storeJurnalUmum'])->name('jurnal.store');

    // Export CSV (Trial, Balance, Ledger, Cash)
    Route::get('/trial-balance.csv',[ReportController::class,'exportTrialBalanceCsv'])->name('trial.csv');
    Route::get('/balance-sheet.csv',[ReportController::class,'exportBalanceSheetCsv'])->name('balance.csv');
    Route::get('/ledger.csv',[ReportController::class,'exportLedgerCsv'])->name('ledger.csv');
    Route::get('/cash-ledger.csv',[ReportController::class,'exportCashLedgerCsv'])->name('cash.csv');

    // Export PDF
    Route::get('/trial-balance.pdf',[ReportController::class,'exportTrialBalancePdf'])->name('trial.pdf');
    Route::get('/balance-sheet.pdf',[ReportController::class,'exportBalanceSheetPdf'])->name('balance.pdf');
    Route::get('/ledger.pdf',[ReportController::class,'exportLedgerPdf'])->name('ledger.pdf');
    Route::get('/cash-ledger.pdf',[ReportController::class,'exportCashLedgerPdf'])->name('cash.pdf');
}); // FINANCE_ADDONS
PHP

read -r -d '' AUDIT_HELPER <<'PHP'
<?php
namespace App\Helpers; use Illuminate\Support\Facades\{Auth,DB,Schema};
class AuditLog{ public static function add(string $action,int $status=1,?string $route=null,?string $target=null,$meta=null): void{ try{ $u=Auth::user(); $p=['user_id'=>optional($u)->id,'user_name'=>optional($u)->name?:'System','user_email'=>optional($u)->email,'action'=>$action,'status'=>$status,'ip'=>request()->ip(),'route'=>$route?: (request()->route()?request()->route()->getName():null),'target'=>$target,'meta'=>(is_array($meta)||is_object($meta))?json_encode($meta):$meta,'created_at'=>now(),'updated_at'=>now(),]; if(Schema::hasTable('audit_logs')){ $cols=Schema::getColumnListing('audit_logs'); $p=array_intersect_key($p,array_flip($cols)); DB::table('audit_logs')->insert($p);} }catch(\Throwable $e){ /* ignore */ } } }
PHP

read -r -d '' VIEW_JURNAL <<'BLADE'
@extends('layouts.app')
@section('title','Finance â€” Jurnal Umum')
@section('content')
<div class="m-card p-5 mb-4">
  <div class="text-lg text-slate-200 font-semibold mb-4">Jurnal Umum</div>
  @if(session('ok'))<div class="text-green-400 mb-3">{{ session('ok') }}</div>@endif
  @if($errors->any())<div class="text-red-400 mb-3">{{ $errors->first() }}</div>@endif
  <form method="POST" action="{{ route('finance.jurnal.store') }}">
    @csrf
    <div class="grid md:grid-cols-6 gap-3 mb-4">
      <input type="date" name="date" class="m-inp" required value="{{ now()->toDateString() }}">
      <input type="text" name="ref" class="m-inp" placeholder="Ref (opsional)">
      <div class="md:col-span-4"><input type="text" name="description" class="m-inp" placeholder="Keterangan (opsional)"></div>
    </div>
    <div class="overflow-auto">
      <table class="w-full text-sm" id="jr-table">
        <thead><tr><th class="text-left p-2 w-1/2">Akun</th><th class="text-right p-2 w-32">Debit</th><th class="text-right p-2 w-32">Kredit</th><th class="text-left p-2 w-1/4">Memo</th><th class="p-2 w-12"></th></tr></thead>
        <tbody id="jr-body">
          @for($i=0;$i<2;$i++)
          <tr>
            <td class="p-2">
              <select name="lines[{{ $i }}][account_id]" class="m-inp" required>
                <option value="">Pilih akun</option>
                @foreach($accounts as $a)
                  <option value="{{ $a->id }}">{{ $a->code }} â€” {{ $a->name }}</option>
                @endforeach
              </select>
            </td>
            <td class="p-2"><input type="number" step="0.01" min="0" name="lines[{{ $i }}][debit]" class="m-inp text-right"></td>
            <td class="p-2"><input type="number" step="0.01" min="0" name="lines[{{ $i }}][credit]" class="m-inp text-right"></td>
            <td class="p-2"><input type="text" name="lines[{{ $i }}][memo]" class="m-inp" placeholder="Memo"></td>
            <td class="p-2 text-center"><button type="button" class="m-btnp" onclick="this.closest('tr').remove(); calc()">Ã—</button></td>
          </tr>
          @endfor
        </tbody>
        <tfoot>
          <tr class="border-t border-slate-700">
            <td class="p-2 text-right font-semibold">TOTAL</td>
            <td class="p-2 text-right" id="sum-debit">0.00</td>
            <td class="p-2 text-right" id="sum-credit">0.00</td>
            <td class="p-2" colspan="2"></td>
          </tr>
        </tfoot>
      </table>
    </div>
    <div class="flex gap-2 mt-3"><button type="button" class="m-btnp" id="add-row">+ Tambah Baris</button><button class="m-btn">Simpan</button></div>
  </form>
</div>
<script>
(function(){
  const body=document.getElementById('jr-body'); const add=document.getElementById('add-row'); const sumD=document.getElementById('sum-debit'); const sumC=document.getElementById('sum-credit');
  function calc(){ let d=0,c=0; body.querySelectorAll('input[name$="[debit]"]').forEach(i=>d+=parseFloat(i.value||0)); body.querySelectorAll('input[name$="[credit]"]').forEach(i=>c+=parseFloat(i.value||0)); sumD.textContent=d.toFixed(2); sumC.textContent=c.toFixed(2); }
  window.calc=calc; add.addEventListener('click',()=>{ const i=body.querySelectorAll('tr').length; const sel=body.querySelector('select').outerHTML.replace(/\[0\]/g,'['+i+']'); body.insertAdjacentHTML('beforeend',`<tr><td class=\"p-2\">${sel}</td><td class=\"p-2\"><input type=\"number\" step=\"0.01\" min=\"0\" name=\"lines[${i}][debit]\" class=\"m-inp text-right\"></td><td class=\"p-2\"><input type=\"number\" step=\"0.01\" min=\"0\" name=\"lines[${i}][credit]\" class=\"m-inp text-right\"></td><td class=\"p-2\"><input type=\"text\" name=\"lines[${i}][memo]\" class=\"m-inp\" placeholder=\"Memo\"></td><td class=\"p-2 text-center\"><button type=\"button\" class=\"m-btnp\" onclick=\"this.closest('tr').remove(); calc()\">Ã—</button></td></tr>`); });
  body.addEventListener('input',e=>{ if(e.target.matches('input')) calc(); }); calc();
})();
</script>
@endsection
BLADE

# Minimal placeholders untuk views inti (kas/reports) jika belum ada
read -r -d '' VIEW_KAS_MINI <<'BLADE'
@extends('layouts.app')
@section('title','Finance â€” Kas Keluar/Masuk')
@section('content')
<div class="m-card p-5 mb-4">
  <div class="text-lg text-slate-200 font-semibold mb-4">Kas Keluar/Masuk</div>
  <form method="POST" action="{{ route('finance.kas.store') }}" class="grid md:grid-cols-6 gap-3">
    @csrf
    <input type="date" name="date" class="m-inp" required value="{{ now()->toDateString() }}">
    <select name="type" class="m-inp" required><option value="in">Kas Masuk</option><option value="out">Kas Keluar</option></select>
    <select name="cash_account_id" class="m-inp" required>@foreach($cashAccounts as $c)<option value="{{ $c->id }}">{{ $c->code }} â€” {{ $c->name }}</option>@endforeach</select>
    <select name="counter_account_id" class="m-inp" required>@foreach($allAccounts as $a)<option value="{{ $a->id }}">{{ $a->code }} â€” {{ $a->name }}</option>@endforeach</select>
    <input type="number" step="0.01" min="0" name="amount" class="m-inp" placeholder="Jumlah" required>
    <input type="text" name="ref" class="m-inp" placeholder="Ref (opsional)">
    <div class="md:col-span-6"><input type="text" name="description" class="m-inp" placeholder="Keterangan (opsional)"></div>
    <div class="md:col-span-6"><button class="m-btn">Simpan</button></div>
  </form>
</div>
@endsection
BLADE

read -r -d '' VIEW_LEDGER_MINI <<'BLADE'
@extends('layouts.app')
@section('title','Finance â€” Buku Besar')
@section('content')
<div class="m-card p-5 mb-4">
  <div class="text-lg text-slate-200 font-semibold mb-4">Buku Besar</div>
  <p>View buku besar placeholder. Silakan ganti dengan versi kustom Anda bila perlu.</p>
</div>
@endsection
BLADE

# --------------------------- WRITE FILES --------------------------------------
# 0) Config (opsional)
write_file config/finance.php "<?php\nreturn ['default_cash_account_id'=>null];\n"

# 1) Migration â€” gunakan nama stabil jika belum ada class yang sama
ensure_dir database/migrations
MIG_FILE=$(ls database/migrations/*_create_finance_tables.php 2>/dev/null | head -n1 || true)
if [[ -z "${MIG_FILE}" ]]; then
  MIG_FILE="database/migrations/$(date +%Y_%m_%d_%H%M%S)_create_finance_tables.php"
  write_file "$MIG_FILE" "$MIGRATION"
else
  say "migration sudah ada: $MIG_FILE (skip)"
fi

# 2) Models (jangan replace tanpa izin)
[[ -f app/Models/Account.php ]] || write_file app/Models/Account.php "$MODEL_ACCOUNT"
[[ -f app/Models/JournalEntry.php ]] || write_file app/Models/JournalEntry.php "$MODEL_JE"
[[ -f app/Models/JournalLine.php ]] || write_file app/Models/JournalLine.php "$MODEL_JL"

# 3) Controllers
if [[ ! -f app/Http/Controllers/Finance/AccountController.php ]]; then
  ensure_dir app/Http/Controllers/Finance
  write_file app/Http/Controllers/Finance/AccountController.php "$CTRL_ACCOUNT"
fi

if [[ ! -f app/Http/Controllers/Finance/JournalController.php ]]; then
  write_file app/Http/Controllers/Finance/JournalController.php "$CTRL_JOURNAL_FULL"
else
  # tambahkan metode jurnal umum kalau belum ada
  if $ENABLE_ADDONS; then
    if ! grep -Fq "function jurnalUmum(" app/Http/Controllers/Finance/JournalController.php; then
      # sisipkan blok metode jurnal umum + store
      if $DRYRUN; then say "akan append metode jurnal umum ke JournalController"; else
        backup app/Http/Controllers/Finance/JournalController.php
        perl -0777 -pe "s/\n\}\s*\z/\n  function jurnalUmum(){ \$accounts=\\App\\Models\\Account::orderBy('code')->get(); return view('finance.journal.jurnal_umum',compact('accounts')); }\n  function storeJurnalUmum(\\Illuminate\\Http\\Request \$r){ \$d=\$r->validate(['date'=>'required|date','ref'=>'nullable|string|max:50','description'=>'nullable|string','lines'=>'required|array|min:2','lines.*.account_id'=>'required|exists:accounts,id','lines.*.debit'=>'nullable|numeric|min:0','lines.*.credit'=>'nullable|numeric|min:0','lines.*.memo'=>'nullable|string|max:255']); \$D=0;\$C=0;\$clean=[]; foreach(\$d['lines'] as \$i=>\$l){ \$dd=round((float)(\$l['debit']??0),2); \$cc=round((float)(\$l['credit']??0),2); if(\$dd>0&&\$cc>0) return back()->withErrors('Baris '.(\$i+1).': tidak boleh debit & kredit sekaligus.')->withInput(); if(\$dd==0&&\$cc==0) continue; \$clean[]=['account_id'=>(int)\$l['account_id'],'debit'=>\$dd,'credit'=>\$cc,'memo'=>\$l['memo']??null]; \$D+=\$dd; \$C+=\$cc; } if(count(\$clean)<2) return back()->withErrors('Minimal 2 baris (debit & kredit).')->withInput(); if(abs(\$D-\$C)>0.009) return back()->withErrors('Total debit harus sama dengan total kredit.')->withInput(); \\Illuminate\\Support\\Facades\\DB::transaction(function() use(\$d,\$clean){ \$e=\\App\\Models\\JournalEntry::create(['date'=>\$d['date'],'ref'=>\$d['ref']??null,'description'=>\$d['description']??null,'created_by'=>\\Illuminate\\Support\\Facades\\Auth::id(),'posted_at'=>now()]); foreach(\$clean as \$l){ \\App\\Models\\JournalLine::create(['journal_entry_id'=>\$e->id]+\$l); } }); return back()->with('ok','Jurnal umum tersimpan.'); }\n}\n/s" app/Http/Controllers/Finance/JournalController.php > app/Http/Controllers/Finance/JournalController.tmp && mv app/Http/Controllers/Finance/JournalController.tmp app/Http/Controllers/Finance/JournalController.php
        php_lint app/Http/Controllers/Finance/JournalController.php
        SUMMARY+=("append methods jurnal umum -> JournalController.php")
      fi
    else
      say "Jurnal Umum sudah ada di JournalController (skip)"
    fi
  fi
fi

if [[ ! -f app/Http/Controllers/Finance/ReportController.php ]]; then
  write_file app/Http/Controllers/Finance/ReportController.php "$CTRL_REPORT"
fi

# 4) Routes
if [[ ! -f routes/finance.php ]]; then
  write_file routes/finance.php "$ROUTES_GROUP"
else
  say "routes/finance.php sudah ada (skip pembuatan group inti)"
fi

# loader di routes/web.php (idempotent)
LOADER=$'// >>> FINANCE_MODULE_LOADER\nif (file_exists(base_path(\'routes/finance.php\'))) {\n    require base_path(\'routes/finance.php\');\n}\n// <<< FINANCE_MODULE_LOADER'
append_once routes/web.php "FINANCE_MODULE_LOADER" "$LOADER"

# Addons: routes tambahan
if $ENABLE_ADDONS; then
  if ! grep -Eqs "finance\\.jurnal|finance\\.trial\\.csv" routes/finance.php 2>/dev/null; then
    append_once routes/finance.php "FINANCE_ADDONS" "$ROUTES_ADDONS"
  else
    say "routes addons sudah ada (skip)"
  fi
fi

# 5) Views â€” hanya buat jika belum ada, agar tidak merusak tema Anda
[[ -f resources/views/finance/journal/kas.blade.php ]] || { ensure_dir resources/views/finance/journal; write_file resources/views/finance/journal/kas.blade.php "$VIEW_KAS_MINI"; }
[[ -f resources/views/finance/reports/ledger.blade.php ]] || { ensure_dir resources/views/finance/reports; write_file resources/views/finance/reports/ledger.blade.php "$VIEW_LEDGER_MINI"; }
[[ -f resources/views/finance/reports/cash_ledger.blade.php ]] || write_file resources/views/finance/reports/cash_ledger.blade.php "@extends('layouts.app')\n@section('title','Finance â€” Lajur Kas')\n@section('content')<div class=\"m-card p-5\">Lajur Kas siap. Silakan sesuaikan view.</div>@endsection\n"
[[ -f resources/views/finance/reports/trial_balance.blade.php ]] || write_file resources/views/finance/reports/trial_balance.blade.php "@extends('layouts.app')\n@section('title','Finance â€” Neraca Percobaan')\n@section('content')<div class=\"m-card p-5\">Trial Balance siap. Silakan sesuaikan view.</div>@endsection\n"
[[ -f resources/views/finance/reports/balance_sheet.blade.php ]] || write_file resources/views/finance/reports/balance_sheet.blade.php "@extends('layouts.app')\n@section('title','Finance â€” Neraca')\n@section('content')<div class=\"m-card p-5\">Neraca siap. Silakan sesuaikan view.</div>@endsection\n"

# Jurnal Umum view
if $ENABLE_ADDONS; then
  [[ -f resources/views/finance/journal/jurnal_umum.blade.php ]] || write_file resources/views/finance/journal/jurnal_umum.blade.php "$VIEW_JURNAL"
fi

# 6) AuditLog helper (opsional)
if $ENABLE_ADDONS; then
  [[ -f app/Helpers/AuditLog.php ]] || { ensure_dir app/Helpers; write_file app/Helpers/AuditLog.php "$AUDIT_HELPER"; }
fi

# 7) Seeder (PSR-4 / legacy aware)
if [[ -d database/seeders ]]; then
  if [[ ! -f database/seeders/AccountsTableSeeder.php ]]; then
    write_file database/seeders/AccountsTableSeeder.php "<?php\\nnamespace Database\\\\Seeders; use Illuminate\\\\Database\\\\Seeder; use App\\\\Models\\\\Account; class AccountsTableSeeder extends Seeder{ public function run(): void{ \\$data=[['code'=>'1000','name'=>'Kas','type'=>1,'is_cash'=>true],['code'=>'1100','name'=>'Bank','type'=>1,'is_cash'=>true],['code'=>'1200','name'=>'Piutang Usaha','type'=>1],['code'=>'2000','name'=>'Hutang Usaha','type'=>2],['code'=>'3000','name'=>'Modal','type'=>3],['code'=>'4000','name'=>'Pendapatan','type'=>4],['code'=>'5000','name'=>'Beban Operasional','type'=>5]]; foreach(\\$data as \\$d){ Account::firstOrCreate(['code'=>\\$d['code']], \\$d+['is_active'=>true]); } } }"
  else
    say "Seeder PSR-4 sudah ada (skip)"
  fi
  # sisipkan call di DatabaseSeeder jika belum ada
  if [[ -f database/seeders/DatabaseSeeder.php ]] && ! grep -Fq 'AccountsTableSeeder::class' database/seeders/DatabaseSeeder.php; then
    backup database/seeders/DatabaseSeeder.php
    perl -0777 -pe "s/(public function run\(\): void\s*\{\s*)/\$1\n        \$this->call(\\\\Database\\\\Seeders\\\\AccountsTableSeeder::class);\n/s" database/seeders/DatabaseSeeder.php > database/seeders/DatabaseSeeder.tmp && mv database/seeders/DatabaseSeeder.tmp database/seeders/DatabaseSeeder.php
    php_lint database/seeders/DatabaseSeeder.php
    SUMMARY+=("append call AccountsTableSeeder -> DatabaseSeeder.php")
  fi
else
  ensure_dir database/seeds
  if [[ ! -f database/seeds/AccountsTableSeeder.php ]]; then
    write_file database/seeds/AccountsTableSeeder.php "<?php\\nuse Illuminate\\\\Database\\\\Seeder; use App\\\\Models\\\\Account; class AccountsTableSeeder extends Seeder{ public function run(){ \\$data=[['code'=>'1000','name'=>'Kas','type'=>1,'is_cash'=>true],['code'=>'1100','name'=>'Bank','type'=>1,'is_cash'=>true],['code'=>'1200','name'=>'Piutang Usaha','type'=>1],['code'=>'2000','name'=>'Hutang Usaha','type'=>2],['code'=>'3000','name'=>'Modal','type'=>3],['code'=>'4000','name'=>'Pendapatan','type'=>4],['code'=>'5000','name'=>'Beban Operasional','type'=>5]]; foreach(\\$data as \\$d){ Account::firstOrCreate(['code'=>\\$d['code']], \\$d+['is_active'=>true]); } } }"
  else
    say "Seeder legacy sudah ada (skip)"
  fi
  if [[ -f database/seeds/DatabaseSeeder.php ]] && ! grep -Fq 'AccountsTableSeeder::class' database/seeds/DatabaseSeeder.php; then
    backup database/seeds/DatabaseSeeder.php
    perl -0777 -pe "s/(public function run\(\)\s*\{\s*)/\$1\n        \$this->call(AccountsTableSeeder::class);\n/s" database/seeds/DatabaseSeeder.php > database/seeds/DatabaseSeeder.tmp && mv database/seeds/DatabaseSeeder.tmp database/seeds/DatabaseSeeder.php
    php_lint database/seeds/DatabaseSeeder.php
    SUMMARY+=("append call AccountsTableSeeder -> DatabaseSeeder.php (legacy)")
  fi
fi

# 8) Composer dump-autoload (untuk pastikan PSR-4)
say "composer dump-autoload -o"
$DRYRUN || $COMPOSER_BIN dump-autoload -o || warn "composer gagal, lanjutâ€¦"

# 9) Paket PDF jika addons aktif (barryvdh/dompdf)
if $ENABLE_ADDONS; then
  if ! $DRYRUN; then
    if ! grep -Fq 'barryvdh/laravel-dompdf' composer.json 2>/dev/null; then
      say "menambahkan paket PDF (barryvdh/laravel-dompdf)"
      $COMPOSER_BIN require barryvdh/laravel-dompdf:^0.8.7 || warn "Gagal install dompdf; fitur export PDF bisa diaktifkan nanti."
    else
      say "paket PDF sudah ada (skip)"
    fi
  else
    say "DRY-RUN: skip install paket dompdf"
  fi
fi

# 10) Migrasi & Seed (opsional)
if $RUN_MIGRATE; then
  ans=$(ask "Jalankan php artisan migrate sekarang?" "Y")
  if [[ "$ans" =~ ^[Yy]$ ]] && ! $DRYRUN; then $PHP_BIN artisan migrate; fi
fi
if $RUN_SEED; then
  ans=$(ask "Jalankan seeder AccountsTableSeeder sekarang?" "Y")
  if [[ "$ans" =~ ^[Yy]$ ]] && ! $DRYRUN; then
    if [[ -d database/seeds ]]; then $PHP_BIN artisan db:seed --class=AccountsTableSeeder; else $PHP_BIN artisan db:seed --class=Database\\Seeders\\AccountsTableSeeder; fi
  fi
fi

# 11) Rangkuman
say "Selesai. Ringkasan perubahan:"
for line in "${SUMMARY[@]:-}"; do echo "  - $line"; done
if [[ ${#SUMMARY[@]:-0} -eq 0 ]]; then echo "  (tidak ada perubahan)"; fi

say "Anda bebas menjalankan ulang script ini â€” aman & idempotent. âœ¨"
